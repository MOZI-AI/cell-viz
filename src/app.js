import React, { useState, useMemo, useEffect } from "react";
import { Typography, Tree, Divider, Upload, Checkbox } from "antd";
import { CloudUploadOutlined } from "@ant-design/icons";
import { HashRouter as Router, Switch, Route, Link } from "react-router-dom";
import { getCuratedGraph, getConnectedNodes } from "./utils/graph";
import Cell from "./components/cell";
import Golgi from "./components/golgi-apparatus";
import Mitochondrion from "./components/mitochondrion";
import Nucleus from "./components/nucleus";
import Ribosome from "./components/ribosome";
import RoughER from "./components/rough-endoplasmic-reticulum";
import SmoothER from "./components/smooth-endoplasmic-reticulum";
import Definition from "./components/definition-box";
import "antd/dist/antd.min.css";
import "./style.css";

const treeData = [
  {
    title: <Link to="/">Generic cell</Link>,
    key: "0-0",
    children: [
      {
        title: <Link to="/nucleus">Nucleus</Link>,
        key: "0-0-0",
      },
      {
        title: <Link to="/golgi">Golgi apparatus</Link>,
        key: "0-0-1",
      },
      {
        title: <Link to="/rough-er">Rough endoplasmic reticulum</Link>,
        key: "0-0-2",
      },
      {
        title: <Link to="/smooth-er">Smooth endoplasmic reticulum</Link>,
        key: "0-0-3",
      },
    ],
  },
];

export default () => {
  const [data, setData] = useState();
  const [graph, setGraph] = useState();
  const [selectedNodes, setSelectedNodes] = useState([]);

  /*
  *
  Load the graph JSON that is generated by MOZI's annotation service
  *
  */
  const handleFileUpload = (file) => {
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
      const graphData = JSON.parse(reader.result);
      const curatedGraphData = getCuratedGraph(graphData.elements);
      setSelectedNodes([]);
      setData(graphData);
      setGraph(curatedGraphData);
    };
    reader.readAsText(file);
  };

  /*
  *
  handle click event on node
  *
  */
  const handleNodeClick = (node) => {
    const connectedNodes = getConnectedNodes(node, data);
    // add to the node's data, all nodes connected to it
    const selectedNode = { ...node, connectedNodes };
    // Check if the node is selected. If selected remove it from selected nodes list, otherwise add it to selected nodes list
    setSelectedNodes((nodes) =>
      nodes.find((n) => n.data.id === node.data.id)
        ? nodes.filter((n) => n.data.id !== node.data.id)
        : [...nodes, selectedNode]
    );
  };

  const uploaderProps = {
    accept: ".json",
    beforeUpload: (file) => {
      handleFileUpload(file);
      return false;
    },
    onRemove: () => {
      setSelectedNodes([]);
      setGraph(null);
      setData(null);
    },
  };

  const visualizerProps = {
    graph,
    selectedNodes,
    onNodeClick: handleNodeClick,
  };
  /*
   *
   *
   *
   */
  return (
    <div className="main-container">
      <nav className="navigation">
        <Typography.Title>Cell visualizer</Typography.Title>
        <div style={{ flexShrink: 1 }}>
          <Upload.Dragger {...uploaderProps}>
            <div
              style={{
                display: "flex",
                padding: "0 15px",
                alignItems: "center",
              }}
            >
              <CloudUploadOutlined
                style={{ marginRight: 15, color: "#1890ff", fontSize: 36 }}
              />{" "}
              Upload a graph JSON file
            </div>
          </Upload.Dragger>
        </div>
        <br />
        {!graph && (
          <p className="ant-upload-hint">
            Don't have a graph data? Head over to MOZI's{" "}
            <a href="http://annotation.mozi.ai">Gene annotation service</a> to
            generate one.
          </p>
        )}
        {graph && (
          <>
            <br />
            <h3>Navigation</h3>
            <Tree
              showLine
              defaultExpandedKeys={[
                "0-0-0",
                "0-0-1",
                "1-1-0",
                "0-0-2",
                "0-0-3",
              ]}
              defaultSelectedKeys={["0-0"]}
              treeData={treeData}
            />
          </>
        )}
      </nav>
      <div className="content">
        <Router>
          <Switch>
            <Route path="/" exact>
              <Cell {...visualizerProps} />
            </Route>
            <Route path="/nucleus">
              <Nucleus {...visualizerProps} />
            </Route>
            <Route path="/golgi">
              <Golgi {...visualizerProps} />
            </Route>
            <Route path="/rough-er">
              <RoughER {...visualizerProps} />
            </Route>
            <Route path="/smooth-er">
              <SmoothER {...visualizerProps} />
            </Route>
          </Switch>
        </Router>
      </div>
      <div className="definition">
        <Definition nodes={selectedNodes} />
      </div>
    </div>
  );
};
